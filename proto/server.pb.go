// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Arg struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                int64    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Arg) Reset()         { *m = Arg{} }
func (m *Arg) String() string { return proto.CompactTextString(m) }
func (*Arg) ProtoMessage()    {}
func (*Arg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}

func (m *Arg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Arg.Unmarshal(m, b)
}
func (m *Arg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Arg.Marshal(b, m, deterministic)
}
func (m *Arg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arg.Merge(m, src)
}
func (m *Arg) XXX_Size() int {
	return xxx_messageInfo_Arg.Size(m)
}
func (m *Arg) XXX_DiscardUnknown() {
	xxx_messageInfo_Arg.DiscardUnknown(m)
}

var xxx_messageInfo_Arg proto.InternalMessageInfo

func (m *Arg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Arg) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Command struct {
	Command              string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args                 []*Arg   `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{1}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Command) GetArgs() []*Arg {
	if m != nil {
		return m.Args
	}
	return nil
}

type Result struct {
	Command              string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args                 []*Arg   `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Results              []*Arg   `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{2}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Result) GetArgs() []*Arg {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Result) GetResults() []*Arg {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*Arg)(nil), "proto.Arg")
	proto.RegisterType((*Command)(nil), "proto.Command")
	proto.RegisterType((*Result)(nil), "proto.Result")
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_ad098daeda4239f7) }

var fileDescriptor_ad098daeda4239f7 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xbf, 0x6a, 0xc3, 0x30,
	0x10, 0x87, 0x71, 0x9c, 0x3f, 0xf4, 0xda, 0x74, 0x10, 0x1d, 0x4c, 0x86, 0x62, 0x4c, 0x28, 0x5e,
	0x6a, 0x41, 0xfa, 0x04, 0x21, 0x6f, 0xe0, 0x6c, 0x5d, 0x8a, 0xec, 0x1c, 0xb2, 0xc1, 0x96, 0xc4,
	0x49, 0x4a, 0xf1, 0x13, 0xf4, 0xb5, 0x0b, 0xb2, 0x32, 0x75, 0x08, 0x74, 0xd2, 0xef, 0xd3, 0x7d,
	0xba, 0x3b, 0x04, 0x4f, 0x16, 0xe9, 0x8a, 0x54, 0x19, 0xd2, 0x4e, 0xb3, 0x55, 0x38, 0x76, 0x9f,
	0xb2, 0x77, 0x9d, 0x6f, 0xaa, 0x56, 0x8f, 0x5c, 0x92, 0x69, 0xdf, 0xb1, 0xd5, 0x76, 0xb2, 0x0e,
	0x23, 0x4a, 0xe1, 0xf0, 0x5b, 0x4c, 0xdc, 0x75, 0x3d, 0x5d, 0xbe, 0x8c, 0x20, 0x37, 0x71, 0xa9,
	0xb5, 0x1c, 0x50, 0x98, 0xde, 0xc6, 0xc8, 0x85, 0xe9, 0xb9, 0x50, 0x4a, 0x3b, 0xe1, 0x7a, 0xad,
	0xec, 0x3c, 0xa2, 0xe0, 0x90, 0x1e, 0x49, 0x32, 0x06, 0x4b, 0x25, 0x46, 0xcc, 0x92, 0x3c, 0x29,
	0x1f, 0xea, 0x90, 0xd9, 0x0b, 0xac, 0xae, 0x62, 0xf0, 0x98, 0x2d, 0xf2, 0xa4, 0x4c, 0xeb, 0x19,
	0x8a, 0x13, 0x6c, 0x4e, 0x7a, 0x1c, 0x85, 0xba, 0xb0, 0x0c, 0x36, 0xed, 0x1c, 0xe3, 0xbb, 0x1b,
	0xb2, 0x57, 0x58, 0x0a, 0x92, 0x36, 0x5b, 0xe4, 0x69, 0xf9, 0x78, 0x80, 0x79, 0x56, 0x75, 0x24,
	0x59, 0x87, 0xfb, 0xa2, 0x83, 0x75, 0x8d, 0xd6, 0x0f, 0xee, 0xff, 0x3d, 0xd8, 0x1e, 0x36, 0x14,
	0x7a, 0xd8, 0x2c, 0xfd, 0xa3, 0xdc, 0x4a, 0x87, 0x9f, 0x04, 0xb6, 0x71, 0xdf, 0xda, 0x2b, 0x85,
	0xc4, 0xf6, 0x90, 0x9e, 0x7d, 0xc3, 0x9e, 0xa3, 0x1d, 0x8b, 0xbb, 0x6d, 0xe4, 0xb8, 0xd7, 0x1b,
	0xac, 0xce, 0x03, 0xa2, 0xb9, 0xe7, 0x95, 0xe1, 0x3b, 0x8c, 0x77, 0x78, 0xc7, 0x6c, 0xd6, 0x81,
	0x3e, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x00, 0xe8, 0x8d, 0xaa, 0xe3, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommandRunnerClient is the client API for CommandRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommandRunnerClient interface {
	Sub(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Result, error)
	Sleep(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Result, error)
	Compute(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Result, error)
}

type commandRunnerClient struct {
	cc *grpc.ClientConn
}

func NewCommandRunnerClient(cc *grpc.ClientConn) CommandRunnerClient {
	return &commandRunnerClient{cc}
}

func (c *commandRunnerClient) Sub(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.CommandRunner/Sub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandRunnerClient) Sleep(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.CommandRunner/Sleep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandRunnerClient) Compute(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.CommandRunner/Compute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandRunnerServer is the server API for CommandRunner service.
type CommandRunnerServer interface {
	Sub(context.Context, *Command) (*Result, error)
	Sleep(context.Context, *Command) (*Result, error)
	Compute(context.Context, *Command) (*Result, error)
}

// UnimplementedCommandRunnerServer can be embedded to have forward compatible implementations.
type UnimplementedCommandRunnerServer struct {
}

func (*UnimplementedCommandRunnerServer) Sub(ctx context.Context, req *Command) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sub not implemented")
}
func (*UnimplementedCommandRunnerServer) Sleep(ctx context.Context, req *Command) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sleep not implemented")
}
func (*UnimplementedCommandRunnerServer) Compute(ctx context.Context, req *Command) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compute not implemented")
}

func RegisterCommandRunnerServer(s *grpc.Server, srv CommandRunnerServer) {
	s.RegisterService(&_CommandRunner_serviceDesc, srv)
}

func _CommandRunner_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandRunnerServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CommandRunner/Sub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandRunnerServer).Sub(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandRunner_Sleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandRunnerServer).Sleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CommandRunner/Sleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandRunnerServer).Sleep(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandRunner_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandRunnerServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CommandRunner/Compute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandRunnerServer).Compute(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommandRunner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CommandRunner",
	HandlerType: (*CommandRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sub",
			Handler:    _CommandRunner_Sub_Handler,
		},
		{
			MethodName: "Sleep",
			Handler:    _CommandRunner_Sleep_Handler,
		},
		{
			MethodName: "Compute",
			Handler:    _CommandRunner_Compute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
